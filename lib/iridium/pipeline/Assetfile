# Iridium's assestfile is rather complex. It's probably one of
# the more complex pipelines you'll encounter. It's documented
# so you can learn from it. It's broken up to many different pipeline.
# Each pipeline is focused solely on it's area. There are 3 pipelines:
#
# 1. Javascript
# 2. Styleshseets
# 3. Asssets
#
# Each pipeline outputs files to the same directory. That directory
# is used for the next step in the pipeline. There are 3 phases
# to asset compilation.
#
# 1. Generation (JS/CSS/Assets)
# 2. Optimization
# 3. Output
#
# You can visualize the pipeline like this
#
#
#  +--------+   +--------+   +--------+  
#  | Assets |   |   JS   |   |  CSS   |
#  +--------+   +--------+   +--------+
#     \|/          \|/           \|/
#      |            |             |
#      |------------+-------------|
#                   |
#      ========== Step 1 ===========
#                   |
#                   |
#            + ------------ +
#            | Unoptimized  |
#            + ------------ +
#                   |
#      ========== Step 2 ===========
#                   |
#                  \|/
#            + ------------ +
#            | Optimization |
#            + ------------ +
#                   |
#      ========== Step 3 ===========
#                   |
#                  \|/
#            + ------------ +
#            |    Output    |
#            + ------------ +
#
# Each pipeline only concerns itself with the inputs from the previous 
# step. This keeps each stage isolated. It also makes it easy to inject
# new steps before others as well as expand them.
#
# The individual pipeline steps are documented as well so you can
# understand them.

tmpdir app.tmp_path.join("pipeline")

# == The JavaScript pipeline
# 1. Compile all the vendor code
output app.build_path.join("javascript")
input app.all_paths[:vendored_javascripts].expanded do
  app_javascript_overrides_engines

  # Skip all the files specified.
  app.config.dependencies.skips.each do |file|
    skip "#{file}.js"
  end

  # Use the specified vendor order to create a vendor.js file
  match "**/*.js" do
    engines_first
    ordered_files = app.config.dependencies.files.collect { |f| "#{f}.js" }
    concat ordered_files, "vendor.js"
  end
end

# 2. Compile environment specific code
input app.all_paths[:config].expanded do
  match "application.coffee" do
    coffee_script
  end

  match "#{Iridium.env}.coffee" do
    coffee_script
  end

  # Put environment specific files in the pipeline
  match "{application,#{Iridium.env}}.js" do
    engines_first
    rewrite_requires
    iife :source_map => app.config.pipeline.source_maps
    concat ['application.js'], 'env.js'
  end
end

# 3. Compile initialization code
input app.all_paths[:initializers].expanded do
  match "**/*.coffee" do
    coffee_script
  end

  match "**/*.js" do
    engines_first
    rewrite_requires
    iife :source_map => app.config.pipeline.source_maps
    concat "init.js"
  end
end

# 4. Compile localiation code
input app.all_paths[:locales].expanded do
  # Compile all the translations into a single dictionary
  match "**.yml" do
    engines_first
    i18n "i18n.js"
  end
end

# 5. Compile library code
input app.lib_path do
  match "**/*.coffee" do
    coffee_script
  end

  match "**/*.js" do
    minispade :rewrite_requires => true, 
      :string => (app.config.minispade.module_format == :string),
      :module_id_generator => proc { |input|
        input.path.gsub /\.js$/, ''
      }

    concat "lib.js"
  end
end

# 6. Compile application code
Iridium::Engine.subclasses.each do |engine|
  input engine.paths[:javascripts].expanded do
    match "**/*.coffee" do
      coffee_script
    end

    match "**/*.js" do
      # Execute build hooks added by external components
      app.config.js_pipelines.invoke self, app

      # Compile all Javascript files into Minispade modules.
      # Files in vendor/javascripts become modules
      # based on their file name. Files in javascripts
      # becomes modules inside your application namespace.
      #
      # Examples:
      # javascripts/boot.js -> require('engine_name/boot');
      # javascripts/views/main.js -> require('engine_name/views/main');
      minispade :rewrite_requires => true, 
        :string => (app.config.minispade.module_format == :string),
        :module_id_generator => proc { |input|
          "#{engine.name.demodulize.underscore}/#{input.path.gsub(/\.js$/, '')}"
        }

      concat "app.js"
    end
  end
end

# 7. Compile handlebars templates
Iridium::Engine.subclasses.each do |engine|
  input engine.paths[:templates].expanded do
    match "**/*.{handlebars,hbs}" do
      handlebars :target => (app.config.handlebars.target || "Handlebars.TEMPLATES"),
        :wrapper_proc => (app.config.handlebars.compiler || proc { |source| "Handlebars.compile(#{source});" }),
        :key_name_proc => proc { |input|
          namespace = app.config.handlebars.namespace
          name = input.path.sub(File.extname(input.path), '').sub(/_view$/, '')
          [namespace, name].compact.join('/')
      }

      concat "templates.js"
    end
  end
end

# 8. Concatentate all the javascripts from the previous steps
#    in the proper order. build_path/javascript now contains
#    the unoptimized application.js
#
output app.build_path.join("preoptimization")
input app.build_path.join("javascript") do
  match "*.js" do
    concat ["vendor.js", "lib.js", "env.js", "init.js", "i18n.js", "app.js", "templates.js"] , "application.js"
    filter Iridium::Pipeline::PrependEnvironmentFilter
  end
end

# == Begin CSS Pipeline
# 1. Prepare the vendor css
output app.build_path.join("css")
input app.all_paths[:vendored_stylesheets].expanded do
  app_stylesheets_overrides_engines

  # Use the specified vendor order to create a vendor.js file
  match "**/*.css" do
    engines_first
    concat "vendor.css"
  end
end

# 2. Prepare the application css
input app.all_paths[:stylesheets].expanded do
  # Skip SASS partials
  skip "**/_*.s{a,c}ss"

  # Now compile all the SCSS or SASS code
  match "**/*.s{c,a}ss" do
    sass
  end

  match "**/*.css" do
    engines_first

    # Execute build hooks added by external components
    app.config.css_pipelines.invoke self, app

    concat "lib.css"
  end
end

# 3. Concatenate the vendor and application css.
#    Now build_path/css contains the final unoptimized application.css
output app.build_path.join("preoptimization")
input app.build_path.join("css") do
  match "*.css" do
    concat ["vendor.css", "lib.css"], "application.css"
  end
end

# == Now process the remaining assets
# 1. Copy over all the assets
output app.build_path.join("preoptimization")
input app.all_paths[:assets].expanded do
  # compile all erb templates. You can access "app" 
  # inside your templates like this: <% app.config %>
  match "**/*.erb" do
    erb binding
  end

  # All assets are moved into build_path/assets
  match "**/*" do
    copy
  end
end

# Include tests in the pipeline if configured
if app.config.pipeline.compile_tests
  output app.build_path.join("preoptimization")
  input app.all_paths[:test].expanded do
    match "**/*.coffee" do
      coffee_script
    end

    match "framework/*.js" do
      concat "build/framework.js"
    end

    match "support/**/*.js" do
      iife :source_map => app.config.pipeline.source_maps
      concat "build/support.js"
    end

    match "**/*_{test,spec}.js" do
      iife :source_map => app.config.pipeline.source_maps
      concat "build/test_cases.js"
    end

    # Create a single test.js that can be used in the browser
    # or phantom.
    match "build/*.js" do
      concat ["build/framework.js", "build/support.js", "build/test_cases.js"], "tests.js"
    end

    # Put the test loader through ERB so can be built
    # correctly
    match "framework/*.erb" do
      erb binding
    end

    # This will copy the test loader over
    match "framework/loader.html" do
      copy "tests.html"
    end

    match "framework/*.html" do
      copy { |path| path.gsub "framework/", "" }
    end

    # Copy over any CSS files needed to make the tests look 
    # good
    match "framework/*.css" do
      concat "tests.css"
    end
  end
end

# now build_path/site contains all the files that need to be optimzed
# or undergo a conditional build step
output app.build_path.join("optimized")
input app.build_path.join("preoptimization") do

  # Execute build hooks added by external components
  app.config.optimization_pipelines.invoke self, app

  if app.config.pipeline.minify
    match "**/*.js" do
      uglify { |path| path }
    end

    match "**/*.css" do
      yui_css { |path| path }
    end
  end

  if app.config.pipeline.manifest
    match "**/*" do
      cache_manifest { |asset| asset }
    end
  end

  if app.config.pipeline.gzip
    match "**/*.*" do
      copy { |name| [name, "#{name}.gz"] }
    end

    match "**/*.gz" do
      gzip { |path| path }
    end
  end

  # Everything else is simply copied over
  match "**/*" do
    copy
  end
end

# Finally! The final step in the pipeline. build_path/site contains all
# the files for the compiled version. We can simply copy them over
# into the real directory

output app.site_path
input app.build_path.join("optimized") do
  match "**/*" do
    copy
  end
end
