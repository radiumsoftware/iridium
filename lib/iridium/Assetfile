output app.site_path

input app.root do
  # compile all erb templates. You can access "app" 
  # inside your templates like this: <% app.config %>
  match "**/*.erb" do
    erb binding
  end

  match "**/*.coffee" do
    coffee_script
  end

  # Use the specified vendor order to create a vendor.js file
  match "vendor/javascripts/*.js" do
    ordered_files = app.config.dependencies.collect { |f| "vendor/javascripts/#{f}.js" }
    concat ordered_files, "build/vendor.js"
  end

  match "vendor/stylesheets/*.css" do
    concat "build/vendor.css"
  end

  # Put environment specific files in the pipeline
  match "app/config/#{app.env}.js" do
    iife
    concat "build/env.js"
  end

  # Compile all the translations into a single dictionary
  match "app/locales/**/*.yml" do
    i18n "app/config/initializers/i18n_dictionaries.js"
  end

  # Compile all initializers into a single init.js to be concatentated
  # later
  match "app/config/initializers/**/*.js" do
    iife
    concat "build/init.js"
  end

  # Compile all Javascript files into Minispade modules.
  # Files in app/vendor/javascripts become modules
  # based on their file name. Files in app/javascripts
  # becomes modules inside your application namespace.
  #
  # Examples:
  # app/javascripts/boot.js -> require('app_name/boot');
  # app/javascripts/views/main.js -> require('app_name/views/main');
  match "app/javascripts/**/*.js" do
    minispade :rewrite_requires => true, 
      :string => (app.config.minispade.module_format == :string),
      :module_id_generator => proc { |input|
        input.path.gsub("app/javascripts/", "#{app.class.to_s.demodulize.underscore}/").gsub(/\.js$/, '')
      }

    concat "build/lib.js"
  end

  # Now prepare the handlebars templates by transforming them
  match "app/templates/**/*.{handlebars,hbs}" do
    handlebars :target => (app.config.handlebars.target || "#{app.class.to_s.camelize}.TEMPLATES"),
      :wrapper_proc => (app.config.handlebars.compiler || proc { |source| "Handlebars.compile(#{source});" }),
      :key_name_proc => proc { |input|
      input.path.sub("app/templates/", '').sub(File.extname(input.path), '')
    }

    concat "build/templates.js"
  end

  # minify and contact lib.js and vendor.js into a single
  # application.js
  match "build/*.js" do
    concat ["build/vendor.js", "build/env.js", "build/init.js", "build/lib.js", "build/templates.js"] , "application.js"

    if app.config.pipeline.minify
      uglify { |path| path }
    end
  end

  # compile all SCSS files into equivalent css file.
  # SCSS partials are not included in compiled output.
  match /app\/stylesheets\/(?:.+\/)?[^_].+\.s[ca]ss/ do
    sass
  end

  match "app/stylesheets/**/*.css" do
    concat "build/lib.css"
  end

  # select all stylesheets in the project
  match "build/*.css" do
    concat ["build/vendor.css", "build/lib.css"], "application.css"

    if app.config.pipeline.minify
      yui_css { |path| path }
    end
  end

  # All files in app/public are simpliy copied into the output directory.
  # Example:
  # app/assets/images/logo.png -> site/images/logo.png
  match "app/assets/**/*" do
    copy do |input|
      input.sub "app/assets/", ""
    end
  end

  # copy the index html
  match "app/index.html" do
    copy do |input|
      input.sub "app/", ""
    end
  end

  # All images are moved int
  match "app/assets/**/*" do
    copy { |path| path.sub("assets/", "") }
  end

  manifest if app.config.pipeline.manifest

  if app.config.pipeline.gzip
    match "**/*" do
      copy { |name| [name, "#{name}.gz"] }
    end

    match "**/*.gz" do
      gzip { |input| input }
    end
  end
end
