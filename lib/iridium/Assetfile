output app.site_path

input app.app_path do
  # compile all erb templates. You can access "app" 
  # inside your templates like this: <% app.config %>
  match "**/*.erb" do
    erb :binding => binding
  end

  match "**/*.{hbs,handlebars}" do
    handlebars  :key_name_proc => proc { |input|
      input.path.gsub(/javascripts\/templates\//, '').gsub(File.extname(input.path), '')
    }
  end

  match "**/*.coffee" do
    coffee_script
  end

  match "**/*.less" do
    less
  end

  # Put environment specific files in the pipeline
  match "config/#{app.env}.js" do
    iife
    concat "build/env.js"
  end

  # Compile all the translations into a single dictionary
  match "locales/**/*.yml" do
    i18n "config/initializers/i18n_dictionaries.js"
  end

  # Compile all initializers into a single init.js to be concatentated
  # later
  match "config/initializers/**/*.js" do
    iife
    concat "build/init.js"
  end

  # Compile all Javascript files into Minispade modules.
  # Files in app/vendor/javascripts become modules
  # based on their file name. Files in app/javascripts
  # becomes modules inside your application namespace.
  #
  # Examples:
  # app/vendor/javascripts/jquery.min.js -> minispade.require('jquery');
  # app/javascripts/boot.js -> minispade.require('app_name/boot');
  # app/javascripts/views/main.js -> minispade.require('app_name/views/main');
  match "javascripts/**/*.js" do
    minispade :rewrite_requires => true, :string => !app.production?, :module_id_generator => proc { |input|
      input.path.gsub(/javascripts\//, "#{app.class.to_s.demodulize.underscore}/").gsub(/\.js$/, '')
    }

    concat "build/lib.js"
  end

  # Use the specified vendor order to create a vendor.js file
  match "vendor/javascripts/*.js" do
    ordered_files = app.config.dependencies.collect { |f| "vendor/javascripts/#{f}.js" }
    ordered_concat ordered_files, "build/vendor.js"
  end

  # minify and contact lib.js and vendor.js into a single
  # application.js
  match "build/*.js" do
    uglify if app.production?

    ordered_concat ["build/vendor.js", "build/env.js", "build/init.js", "build/lib.js"] , "application.js"
  end

  # compile all SCSS files into equivalent css file.
  # SCSS partials are not included in compiled output.
  match /stylesheets\/(?:.+\/)?[^_].+\.s[ca]ss/ do
    sass
  end

  # select all stylesheets in the project
  match "{vendor/stylesheets,stylesheets}/**/*.css" do
    # minifiy CSS when compiling assets for production
    yui_css if app.production?

    # finally concatenate all stylesheets into a single
    # application.css file.
    concat_css "application.css"
  end

  # All files in app/public are simpliy copied into the output directory.
  # Example:
  # app/public/index.html -> site/index.html
  match "public/**/*" do
    copy do |input|
      input.sub(/public\//, '')
    end
  end

  # All images are moved int
  match "images/**/*" do
    copy
  end

  if app.production?
    match "**/*" do
      copy { |name| [name, "#{name}.gz"] }
    end

    match "**/*.gz" do
      gzip { |input| input }
    end
  end
end
